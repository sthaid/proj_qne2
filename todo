 VariableDefinePlatformVar(NULL,
                                                  "RobotIsExploding",
                                                  &IntType,
                                                  (union AnyValue*)&RobotIsExploding,
                                                  false);



make minimum loc size

make sdl global vars for win_width,height, char width, height
- remove get_size
- remove args from printinit
- dont need win_rows cols

swipe up causes crash in menu

maybe dont need sdl_print_init

sdl_print_init ?

devel mode
- don't allow any new connections, or process any in progress

settings menu entry
- version
- reset_apps, are you sure
- copyright,  scrolling with mouse

dont swipe up to exit


reset_apps
- at init time, if apps dir not present
- and when selected in settings


---- done ---
settings
- devel_mode
- reset_apps

devel mode
- purple screen

settings file
- version
- devel_mode
- spares follow


init routine
- read settings when starting

makefile
- create apps tarfile, and put in assets

---- info ----

dir struct
files  (TOP)
- log
- settings
- apps
  - menu
  - hello ...
  - reversi ...
================================
================================
================================
================================

--------------


redo tools, with better names
- use ez_apps  


--------------

build linux app simulator
include tar of the apps in the assets
populate when prog starts
add buttons:
- reset
- devel

-----------

move src to common dir ?

api to provide ctr coords instead of top left
- update menu code
- upde hello.c

finish hello.c code

tools
- add vitool
- tools/todo dir
- tools/save dir has tests for the apps
- maybe run cmd should allow multiple args

------

dont use logical size


xxxxxxxxxxx

simplify how test_linux and test_picoc work

use bigger font, or expand mouse area for controls on bottom      <=========

unit_test pgm      <=========
- test sdl_create_texture_from_display
  - sdl_query_texture
- event processing ?
- sdl_create_color
- printing with and without nk
- first page should handle events to jump to specific pages
- sdl_render_points

improve controller menu

apps ...
- devel mode   <=======
- prime num   <=======
- unit test   <=====
- copy right
- clock
- reversi
- morse code test

use netcat instead  <========
- is netcat on windows  <========  YES

end program prblem

redo dir struct  <===========

devel mode support  <===========

README files

menu  <==========
- menu icons, circle plus one or two lines of text
  - sizeof of text auto determined
- multiple menu screens

display multi lines of text
- use pgup/down or vertical scroll with mouse

picoc
- unit test multiple c files , with common hdr file   <=======  DONE
- add Sdl_render_text_nk
- Sdl_render_printf_nk use win_width and char_width   <======== DONE

misc
- does log file have to be in files?

code
-rw-rw-r-- 1 haid haid 4.4K Jul 12 13:22 utils.c
-rw-rw-r-- 1 haid haid 1.2K Jul 10 08:21 utils.h
- add pthread_create_detached
- get rid of FATAL   <===========
-rw-rw-r-- 1 haid haid 9.2K Jul 12 13:21 main.c
- misc xxx marked
-rw-rw-r-- 1 haid haid  35K Jul 13 19:25 sdl.c
-rw-rw-r-- 1 haid haid 2.7K Jul 13 19:17 sdl.h
- misc
- is sdl_create_texture_from_display needed

code formatting
- replace 'xxx * s' with 'xxx *s'

test with both windows and linux developer 
- is windows crlf a problem


---------------

need win_width

rename to micro apps = u-apps

dir struct

hello test pgm
- rotation
- font int, chars across

screen size scaling, to 1000 width x N height
- try SDL_RenderSetLogicalSize

xxxxxxxxxxx

add mouse swipe detection

rotate texture with SDL_RenderCopyEx

avoid calling sdl_init from hello.c on android

check size of font on Android

picoc.c arg0

pthread_creae detached

larger loc around matching events

adb_connect not working

hello.c
- unit test 
- swipe to change screens
- screen 0 = clock
- screen 1 = font
- screen 2 = render text and rectangles, etc
- screen 3 = textures
- screen 4 = sizeof prints

renmae the qapps/bin/*

shutdown the app?

error messages
FORTIFY: pthread_mutex_lock called on a destroyed mutex (0x719a7a8b18)

picoc - comment these
sizoef(char)      = 1
sizoef(short)     = 2
sizoef(int)       = 4
sizoef(long)      = 8
sizoef(size_t)    = 4
sizoef(off_t)     = 4
sizoef(time_t)    = 4
sizeof(123)       = 8
sizeof(123UL)     = 8
sizeof sdl_rect   = 8
Q app
07/06/25 21:02:17.494 INFO SDL_main: sizoef(char)      = 1
07/06/25 21:02:17.494 INFO SDL_main: sizoef(short)     = 2
07/06/25 21:02:17.494 INFO SDL_main: sizoef(int)       = 4
07/06/25 21:02:17.494 INFO SDL_main: sizoef(long)      = 8
07/06/25 21:02:17.494 INFO SDL_main: sizoef(size_t)    = 8
07/06/25 21:02:17.494 INFO SDL_main: sizoef(off_t)     = 8
07/06/25 21:02:17.494 INFO SDL_main: sizoef(time_t)    = 8


cmds should cd to topdir

these all need to get ip addr and password
-rwxr-xr-x 1 haid haid   44 Jul  5 16:50 adbc 
-rwxrwxr-x 1 haid haid  17K Jul  6 15:41 cmd 
-rw-rw-r-- 1 haid haid 3.5K Jul  6 11:03 cmd.c     
-rwxr-xr-x 1 haid haid   31 Jul  6 09:11 log_cat  
-rwxr-xr-x 1 haid haid   40 Jul  6 11:13 log_clear 
-rwxr-xr-x 1 haid haid   26 Jul  6 11:21 log_mark 
-rwxr-xr-x 1 haid haid   26 Jul  6 09:16 ls_files
-rw-rw-r-- 1 haid haid   35 Jul  6 08:42 Makefile
-rwxr-xr-x 1 haid haid  601 Jul  6 10:23 get
-rwxr-xr-x 1 haid haid  429 Jul  6 11:00 get_tar
-rwxr-xr-x 1 haid haid  421 Jul  6 10:39 put

read sensor using ndk

add sdl rotate texture, and add a analog clock to hello.c

port reversi

reset cmd
- make tar file and put in resources

ideas for apps:
- reversi
- tic tack toe
- blackjack
- pong
- compass
- lat/long
- flashlight app

limit use of int32_t

version.c, put this in startup line, include build data time and git commit
---------

================
SENSOR ACCSS
================

https://developer.android.com/ndk/reference/group/sensor

https://stackoverflow.com/questions/4200119/access-android-sensors-via-ndk

sample code using android ndk to access sensors

"android ndk example to get compass reading"

#include <android/sensor.h>

// ... (Get the sensor manager and event queue)

// Find the magnetic field sensor
ASensor* magneticSensor = ASensorManager_getDefaultSensor(sensor_manager, ASENSOR_TYPE_MAGNETIC_FIELD);

// Enable the sensor
ASensorEventQueue_enableSensor(queue, magneticSensor);

// Read sensor data in a loop
while (true) {
    ASensorEvent event;
    int eventsRead = ASensorEventQueue_getEvents(queue, &event, 1);

    if (eventsRead > 0) {
        // Process magnetic field data (event.data[0], event.data[1], event.data[2])
        // You'll need to implement your own sensor fusion logic
        // to calculate the compass heading from accelerometer and magnetometer data.
        // There is no dedicated ASENSOR_TYPE_COMPASS or ASENSOR_TYPE_ORIENTATION in the NDK directly for the compass heading.
    }
}

// Disable and destroy the sensor and event queue
ASensorEventQueue_disableSensor(queue, magneticSensor);
ASensorManager_destroyEventQueue(sensor_manager, queue);

https://developer.android.com/ndk/samples
https://github.com/android/ndk-samples/tree/main
git clone https://github.com/android/ndk-samples

find ndk routines for
- compass
- level
- flashlight
- lat/long

==================
APP DIR LAYOUT
==================

aliases: 
alias qne_app_top='~/proj/proj_qne2/android-project/SDL2/build/org.sthaid.qne2'
alias qne_app='~/proj/proj_qne2/android-project/SDL2/build/org.sthaid.qne2/app'
alias qne_app_jni='~/proj/proj_qne2/android-project/SDL2/build/org.sthaid.qne2/app/jni'
alias qne_app_jni_src='~/proj/proj_qne2/android-project/SDL2/build/org.sthaid.qne2/app/jni/src'
alias qne_app_src_main='~/proj/proj_qne2/android-project/SDL2/build/org.sthaid.qne2/app/src/main'

--------
top = SDL2/build/org.sthaid.qne2
--------
./gradle/wrapper/gradle-wrapper.jar
./gradle/wrapper/gradle-wrapper.properties
./gradlew.bat
./build.gradle
./gradlew
./gradle.properties
./settings.gradle

-------
app
-------
./app/build.gradle
./app/proguard-rules.pro

-------
app/jni
-------
./app/jni/Android.mk
./app/jni/Application.mk
./app/jni/SDL/Android.mk
./app/jni/CMakeLists.txt

./app/jni/src/Android.mk       : source files
./app/jni/src/stub.c
./app/jni/src/CMakeLists.txt

--------
app/src/main/
--------
./app/src/main/AndroidManifest.xml

--------
app/src/main/java
--------
./app/src/main/java/org/libsdl/app/SDLActivity.java
./app/src/main/java/org/libsdl/app/SDLAudioManager.java
./app/src/main/java/org/libsdl/app/HIDDeviceUSB.java
./app/src/main/java/org/libsdl/app/HIDDeviceManager.java
./app/src/main/java/org/libsdl/app/HIDDevice.java
./app/src/main/java/org/libsdl/app/SDL.java
./app/src/main/java/org/libsdl/app/SDLSurface.java
./app/src/main/java/org/libsdl/app/HIDDeviceBLESteamController.java
./app/src/main/java/org/libsdl/app/SDLControllerManager.java
./app/src/main/java/org/sthaid/qne2/Qne2Activity.java

--------
app/src/main/res
--------
./app/src/main/res/mipmap-mdpi/ic_launcher.png
./app/src/main/res/mipmap-hdpi/ic_launcher.png
./app/src/main/res/mipmap-xhdpi/ic_launcher.png
./app/src/main/res/values/strings.xml                : game string
./app/src/main/res/values/colors.xml
./app/src/main/res/values/styles.xml
./app/src/main/res/mipmap-xxhdpi/ic_launcher.png
./app/src/main/res/mipmap-xxxhdpi/ic_launcher.png

==================
todo
==================

qne app
- add auto start service when phone boots
- add fuse support, connect to fuse svc running on my ubunut pc

================
c interpreter
================

https://github.com/jpoirier/picoc
git clone https://github.com/jpoirier/picoc

cd picoc
git diff 865ae807ff6384ec0cded86f84cec9d8c118956f HEAD .


================
sdl3
===============

references:
- https://wiki.libsdl.org/SDL2/Android
- https://github.com/libsdl-org/SDL/blob/main/docs/README-android.md

Android:
- Using the SDL3 Android Archive (.aar)

build on linux
- https://github.com/libsdl-org/SDL/blob/main/docs/INTRO-cmake.md
- git clone https://github.com/libsdl-org/SDL

build example code
- gcc -I vendored/SDL/include -o clear clear.c  build/libSDL3.so
- LD_LIBRARY_PATH=build clear

misc:  SDL2
- sudo apt install libsdl2-dev
- $pkg-config --libs --cflags sdl2             # example for sdl2
    -D_REENTRANT -I/usr/include/SDL2 -lSDL2

==========================
android
==========================

Enable Developer Mode on your device
- Settings > About Phone > Softwae Information:
  - Tap Build Number 7 times
- Settings > Developer Options:
  - Turn on Developer Options using the slider at the top;
    note that it may already be turned on
  - Enable USB Debugging
- Plug in USB Cable, and when asked to Allow USB Debugging, select OK.

Enable Developer Mode on your device, using tcp
- with usb cable connected
- adb tcpip 5555
- disconnect usb cable
- adb connect 192.168.1.243:5555

references:
- build SDL3 for Android
  - https://wiki.libsdl.org/SDL3/Android
- how to build a simple app
   https://github.com/libsdl-org/SDL/blob/main/docs/README-android.md 
- sdkmanager - use this instead of AndoidStudio
   https://developer.android.com/tools/sdkmanager

steps
- install cmdline-tools, instructions -
    https://developer.android.com/tools/sdkmanager
- instal minimal java
    sudo apt install openjdk-17-jdk ant android-sdk-platform-tools-common
    java -version   # should be openjdk version "17.0.15" 2025-04-15
- install android sdk packages
    cd ~/android_sdk/cmdline-tools/latest/bin
    ./sdkmanager --install "platforms;android-30" 
    ./sdkmanager --install "build-tools;30.0.2"
    ./sdkmanager --install "ndk;21.3.6528147"
    ./sdkmanager --install "ndk;26.3.11579264"
- add to bash_profile
    # env vars
    if [ "$ENV_INITIALIZED" = "" ]; then
      export EDITOR=vi
      export GIT_EXTERNAL_DIFF=~/bin/git_external_diff

      export ANDROID_HOME=~/android_sdk
      export ANDROID_NDK_HOME=$ANDROID_HOME/ndk/21.3.6528147
      export PATH=$PATH:$ANDROID_HOME/ndk/21.3.6528147
      export PATH=$PATH:$ANDROID_HOME/build-tools
      export PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin

      ENV_INITIALIZED=true
    fi
- install adb debugger
    sudo apt install android-tools-adb android-tools-fastboot
    adb version    # test
    adb shell      # test, need to accept on phone

Notes from : https://github.com/libsdl-org/SDL/blob/main/docs/README-android.md 
- Regarding SDL3 ...
  - Android SDK (version 35 or later)    https://developer.android.com/sdk/index.html
  - Android NDK r15c or later            https://developer.android.com/tools/sdk/ndk/index.html
  - Minimum API level supported by SDL: 21 (Android 5.0)

obsolete notes regarding android-studio
- https://developer.android.com/studio/install
   - sudo apt-get install libc6:i386 libncurses5:i386 libstdc++6:i386 lib32z1 libbz2-1.0:i386
   - download studio tar file:  android-studio-2025.1.1.13-linux.tar.gz
   - tar -xvf Downloads/android-studio-2025.1.1.13-linux.tar.gz 
   - cd android-studio/bin
   - ./studio.sh
- https://developer.android.com/tools/sdk/ndk/index.html
   - https://developer.android.com/studio/projects/install-ndk
   - studio -> New Project -> No Activity? -> Next -> Name=Test1 -> Finish
   - Menu -> Tools -> SDK Manager -> SDK Tools -> Check the following
       NDK Side by Side
       Android SDK Command Line Tools
       CMake
     Ok

========================================
========================================
============  BACKUP INFO  =============
========================================
========================================


==============
fuse
==============

references
1- https://github.com/libfuse/libfuse
   git clone https://github.com/libfuse/libfuse
2- https://libfuse.github.io

devel pkg
- sudo apt install libfuse3-dev
- pkg-config fuse3 --cflags --libs
    -I/usr/include/fuse3 -lfuse3 -lpthread
- https://libfuse.github.io/doxygen/

what fuse patckages are installed
- dpkg -l | grep fuse

building test program
- gcc -Wall t1.c `pkg-config fuse3 --cflags --libs` -o t1
- gcc -Wall t2.c `pkg-config fuse3 --cflags --libs` -o t2
